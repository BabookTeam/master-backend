<?php

namespace App\Repository;

use App\Exception;
use App\Entity\User;
use App\User\UserCollection;
use App\User\UserEntity;
use \Doctrine\ORM\EntityRepository;
use \Doctrine\ORM\Mapping\ClassMetadata;
use JsonSerializable;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
   /** 
    * Select all users and cast them to an UserCollection
    * Retrun  a user collection
    * @return UserCollection
    */
    public function getAll(): UserCollection
    {
        $users = new UserCollection($this->findAll());
        return $users;
    }

    /**
     * Return a single User Entity if found
     * @throws Exception\NoResourceFoundException if invalid entity id provided
     * @param integer $id
     * @return UserEntity
     */
    public function getUser(int $id): UserEntity
    {
        $result = new UserEntity($this->findBy(['id'=>$id]));

        if (null == $result) {
            throw Exception\NoResourceFoundException::create('User not found');
        }
        return $result;
    }

    /**
     * Persist to databse a full user entity (User + Profile)
     * Return UserID
     * @todo Add logic to persisti profile Entity
     * @param array $data
     * @param UserInputFilter $inputFilter class that ma
     * @return integer
     * @throws Exception\InvalidParameterException if the data is not valid.
     * @throws Exception\RuntimeException if an error occurs during insert.
     */
    public function addUser(array $data, UserInputFilter $inputFilter): int
    {
        $inputFilter->setData($data);
        if (! $inputFilter->isValid()) {
            throw Exception\InvalidParameterException::create(
                'Invalid parameter',
                $inputFilter->getMessages()
            );
        }

        $user = new User();
        $user->setEmail($data['email']);
        $user->setPassword($data['password']);
        $this->_em->persist($user);
        $this->_em->flush($user);

        $user_id = $user->getId();
        if (! is_int($user_id)) {
            throw Exception\RuntimeException::create(

                'Oops, something went wrong. Please contact the administrator'
            );
        }
        return (int) $user_id;
    }
}
